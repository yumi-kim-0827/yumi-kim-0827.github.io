<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-27T17:05:14+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Crafting UX with frontend magic.</title><subtitle>항상 배움의 자세로</subtitle><entry><title type="html">비전공자를 위한 CS기초 1 … CS basis for non-major</title><link href="http://localhost:4000/cs/2024/05/27/CS-basis-about-computor.html" rel="alternate" type="text/html" title="비전공자를 위한 CS기초 1 … CS basis for non-major" /><published>2024-05-27T00:00:00+09:00</published><updated>2024-05-27T00:00:00+09:00</updated><id>http://localhost:4000/cs/2024/05/27/CS-basis-about-computor</id><content type="html" xml:base="http://localhost:4000/cs/2024/05/27/CS-basis-about-computor.html"><![CDATA[<h1 id="️-컴퓨터란">🖥️ 컴퓨터란?</h1>

<p>컴퓨터란 인간의 업무를 효율적이고 빠르게 수행하도록 도와주는 장치입니다.</p>

<p>컴퓨터는 정보를 입력받아 처리하고 저장하며 출력합니다.</p>

<h1 id="컴퓨터의-구성요소">컴퓨터의 구성요소</h1>

<p>중앙 처리 장치 (CPU) : 컴퓨터의 두뇌, 처리와 제어를 담당합니다.</p>

<p>메모리 : 프로그램이나 데이터를 저장합니다. 주 저장장치 Ram과 보조 저장장치 하드디스크 등이 있습니다.</p>

<p>입출력 장치 : 사용자와 컴퓨터가 상호작용을 하기 위한 장치입니다. 키보드, 모니터, 마우스, 터치스크린, 프린터 등이 있습니다.</p>

<h1 id="컴퓨터의-작동">컴퓨터의 작동</h1>

<p><code class="language-plaintext highlighter-rouge">입력 --- &gt; 처리 --- &gt; 저장 --- &gt; 출력</code></p>

<ol>
  <li>사용자가 컴퓨터에 정보를 입력합니다.</li>
  <li>CPU가 전달받은 정보를 처리하고, 프로그램 실행을 명령합니다.</li>
  <li>처리된 정보를 메모리나 하드디스크에 저장합니다.</li>
  <li>사용자가 알아볼 수 있게 모니터나 프린터, 등을 통해 보여줍니다.</li>
</ol>

<h1 id="프로그래밍이란">프로그래밍이란?</h1>

<p>컴퓨터에게 작업을 시키기 위한 명령을 만드는 과정입니다.</p>

<p>프로그래밍 언어를 통해 개발하여 컴퓨터가 이해하도록 합니다.</p>

<blockquote>
  <p>코딩 연습과 프로젝트 진행하면서 느낀 점들을 솔직하게 적었어요. <a href="https://blog.naver.com/hello_world_yum">Yumee Naver Blog</a></p>
</blockquote>

<blockquote>
  <p>저의 포트폴리오 사이트에요. <a href="https://github.com/jekyll/jekyll">Yumee Portfolio site</a></p>
</blockquote>

<blockquote>
  <p>깃헙에서 더 자세히 알아볼 수 있어요. <a href="https://github.com/yumi-kim-0827">Yumee GitHub</a></p>
</blockquote>]]></content><author><name></name></author><category term="CS" /><summary type="html"><![CDATA[🖥️ 컴퓨터란?]]></summary></entry><entry><title type="html">좋은 리액트 코드를 위한 팁 … React Tip for my code</title><link href="http://localhost:4000/react/2024/05/25/Improvement-Code-in-React-js.html" rel="alternate" type="text/html" title="좋은 리액트 코드를 위한 팁 … React Tip for my code" /><published>2024-05-25T00:00:00+09:00</published><updated>2024-05-25T00:00:00+09:00</updated><id>http://localhost:4000/react/2024/05/25/Improvement-Code-in-React-js</id><content type="html" xml:base="http://localhost:4000/react/2024/05/25/Improvement-Code-in-React-js.html"><![CDATA[<p>🖥️</p>

<h1 id="더-나은-리액트-코드를-위한-팁-정리">더 나은 리액트 코드를 위한 팁 정리</h1>

<p><strong>1.다수의 인자를 받는 함수를 하나의 인자만 받는 함수로 변환합니다.</strong></p>

<p>이를 통해 재사용할 수 있는 유연성을 높일 수 있습니다.</p>

<p><em>예시</em></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">export</span> <span class="n">default</span> <span class="n">function</span> <span class="no">App</span><span class="p">()</span> <span class="p">{</span>
<span class="n">const</span> <span class="p">[</span><span class="n">user</span><span class="p">,</span> <span class="n">setUser</span><span class="p">]</span> <span class="o">=</span> <span class="n">useState</span><span class="p">({</span>
<span class="ss">name: </span><span class="s2">""</span><span class="p">,</span>
<span class="ss">surname: </span><span class="s2">""</span><span class="p">,</span>
<span class="ss">address: </span><span class="s2">""</span>
<span class="p">});</span>

<span class="sr">//</span> <span class="nb">name</span> <span class="err">핸들러</span>
<span class="n">const</span> <span class="n">handleNameChange</span> <span class="o">=</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">setUser</span><span class="p">((</span><span class="n">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
<span class="o">...</span><span class="n">prev</span><span class="p">,</span>
<span class="ss">name: </span><span class="n">e</span><span class="p">.</span><span class="nf">target</span><span class="p">.</span><span class="nf">value</span>
<span class="p">}));</span>
<span class="p">};</span>

<span class="sr">//</span> <span class="n">surname</span> <span class="err">핸들러</span>
<span class="n">const</span> <span class="n">handleSurnameChange</span> <span class="o">=</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">setUser</span><span class="p">((</span><span class="n">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
<span class="o">...</span><span class="n">prev</span><span class="p">,</span>
<span class="ss">surname: </span><span class="n">e</span><span class="p">.</span><span class="nf">target</span><span class="p">.</span><span class="nf">value</span>
<span class="p">}));</span>
<span class="p">};</span>

<span class="sr">//</span> <span class="n">address</span> <span class="err">핸들러</span>
<span class="n">const</span> <span class="n">handleAddressChange</span> <span class="o">=</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">setUser</span><span class="p">((</span><span class="n">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
<span class="o">...</span><span class="n">prev</span><span class="p">,</span>
<span class="ss">address: </span><span class="n">e</span><span class="p">.</span><span class="nf">target</span><span class="p">.</span><span class="nf">value</span>
<span class="p">}));</span>
<span class="p">};</span>

<span class="k">return</span> <span class="p">(</span>
<span class="o">&lt;&gt;</span>
<span class="o">&lt;</span><span class="n">input</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="n">user</span><span class="p">.</span><span class="nf">name</span><span class="p">}</span> <span class="n">onChange</span><span class="o">=</span><span class="p">{</span><span class="n">handleNameChange</span><span class="p">}</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">input</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="n">user</span><span class="p">.</span><span class="nf">surname</span><span class="p">}</span> <span class="n">onChange</span><span class="o">=</span><span class="p">{</span><span class="n">handleSurnameChange</span><span class="p">}</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="n">input</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="n">user</span><span class="p">.</span><span class="nf">address</span><span class="p">}</span> <span class="n">onChange</span><span class="o">=</span><span class="p">{</span><span class="n">handleAddressChange</span><span class="p">}</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/&gt;
);
}</span></code></pre></figure>

<p>이런식으로 인풋값을 업데이트 함수가 더 추가되면 유지보수면에서
효율이 낮아지고 코드 가독성도 안좋습니다.</p>

<p>3가지의 다른 인풋요소를 각각 핸들러 함수를 통해서 객체를 업데이트합니다.</p>

<p>3개의 핸들러 함수는 비슷한 작동과 폼을 가지고 있기 때문에, 하나의 함수로
다수의 인자를 받을 수 있습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">export</span> <span class="n">default</span> <span class="n">function</span> <span class="no">App</span><span class="p">()</span> <span class="p">{</span>
<span class="n">const</span> <span class="p">[</span><span class="n">user</span><span class="p">,</span> <span class="n">setUser</span><span class="p">]</span> <span class="o">=</span> <span class="n">useState</span><span class="p">({</span>
<span class="ss">name: </span><span class="s2">""</span><span class="p">,</span>
<span class="ss">surname: </span><span class="s2">""</span><span class="p">,</span>
<span class="ss">address: </span><span class="s2">""</span>
<span class="p">});</span>

<span class="n">const</span> <span class="n">handleInputChange</span> <span class="o">=</span> <span class="p">(</span><span class="n">field</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="k">return</span> <span class="p">(</span><span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">setUser</span><span class="p">((</span><span class="n">prev</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
<span class="o">...</span><span class="n">prev</span><span class="p">,</span>
<span class="p">[</span><span class="n">field</span><span class="p">]:</span> <span class="n">e</span><span class="p">.</span><span class="nf">target</span><span class="p">.</span><span class="nf">value</span>
<span class="p">}));</span>
<span class="p">};</span>
<span class="p">};</span>

<span class="k">return</span> <span class="p">(</span>

      <span class="o">&lt;</span><span class="n">input</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="n">user</span><span class="p">.</span><span class="nf">name</span><span class="p">}</span> <span class="n">onChange</span><span class="o">=</span><span class="p">{</span><span class="n">handleInputChange</span><span class="p">(</span><span class="s2">"name"</span><span class="p">)}</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="n">input</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="n">user</span><span class="p">.</span><span class="nf">surname</span><span class="p">}</span> <span class="n">onChange</span><span class="o">=</span><span class="p">{</span><span class="n">handleInputChange</span><span class="p">(</span><span class="s2">"surname"</span><span class="p">)}</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="n">input</span> <span class="n">value</span><span class="o">=</span><span class="p">{</span><span class="n">user</span><span class="p">.</span><span class="nf">address</span><span class="p">}</span> <span class="n">onChange</span><span class="o">=</span><span class="p">{</span><span class="n">handleInputChange</span><span class="p">(</span><span class="s2">"address"</span><span class="p">)}</span> <span class="o">/&gt;</span>

      <span class="p">{</span><span class="no">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">(</span><span class="n">user</span><span class="p">)}</span>

<span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p><strong>2.만능 함수를 만들지 말고, 기능을 분리합니다.</strong></p>

<p>모든 기능과 데이터를 관리하는 GOD 컴포넌트를 만들기보단 기능과 컴포넌트를 나누어서
모듈화를 하는 것이 더욱 적합합니다.</p>

<p><strong>3.조건문을 사용하기 보단 Object Map을 사용하세요.</strong></p>

<p><em>예시</em></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">function</span> <span class="no">Account</span><span class="p">({</span><span class="n">type</span><span class="p">})</span> <span class="p">{</span>
<span class="n">let</span> <span class="no">Component</span> <span class="o">=</span> <span class="no">UsualAccount</span>

<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">===</span> <span class="s1">'red'</span><span class="p">)</span> <span class="p">{</span>
<span class="no">Component</span> <span class="o">=</span> <span class="n">redAccount</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">===</span> <span class="s1">'blue'</span><span class="p">)</span> <span class="p">{</span>
<span class="no">Component</span> <span class="o">=</span> <span class="n">blueAccount</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="n">type</span> <span class="o">===</span> <span class="s1">'pink'</span><span class="p">)</span> <span class="p">{</span>
<span class="no">Component</span> <span class="o">=</span> <span class="n">pinkAccount</span>
<span class="p">}</span>

<span class="k">return</span> <span class="p">(</span>

<span class="o">&lt;</span><span class="n">div</span> <span class="n">className</span><span class="o">=</span><span class="s1">'account'</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="no">Component</span> <span class="sr">/&gt;
&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
<span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>해결</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">const</span> <span class="no">CONDITION_MAP</span> <span class="o">=</span> <span class="p">{</span>
<span class="s1">'usual'</span><span class="p">:</span> <span class="no">UsualAccount</span><span class="p">,</span>
<span class="s1">'red'</span><span class="p">:</span> <span class="n">redAccount</span><span class="p">,</span>
<span class="s1">'blue'</span><span class="p">:</span> <span class="n">blueAccount</span><span class="p">,</span>
<span class="s1">'pink'</span><span class="p">:</span> <span class="n">pinkAccount</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">function</span> <span class="no">Account</span><span class="p">({</span><span class="n">type</span><span class="p">})</span> <span class="p">{</span>
<span class="n">const</span> <span class="no">Component</span> <span class="o">=</span> <span class="no">ACCOUNTS_MAP</span><span class="p">[</span><span class="n">type</span><span class="p">]</span>

<span class="k">return</span> <span class="p">(</span>

<span class="o">&lt;</span><span class="n">div</span> <span class="n">className</span><span class="o">=</span><span class="s1">'account'</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="no">Component</span> <span class="sr">/&gt;
&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
<span class="p">)</span>
<span class="p">}</span></code></pre></figure>

<p>변수나 조건에 따라 다양한 요소를 렌더링해야하는 경우 객체를 통해서
쉽고 더욱 구조적으로 이해하기 쉬워집니다. 또한 기능을 확장하는 것도 더욱 간편해집니다.</p>

<p>기능과 컴포넌트 분리를 통해 코드를 단순화하고 재사용성을 높혀
효율적으로 일할 수 있습니다.</p>

<blockquote>
  <p>코딩 연습과 프로젝트 진행하면서 느낀 점들을 솔직하게 적었어요. <a href="https://blog.naver.com/hello_world_yum">Yumee Naver Blog</a></p>
</blockquote>

<blockquote>
  <p>저의 포트폴리오 사이트에요. <a href="https://github.com/jekyll/jekyll">Yumee Portfolio site</a></p>
</blockquote>

<blockquote>
  <p>깃헙에서 더 자세히 알아볼 수 있어요. <a href="https://github.com/yumi-kim-0827">Yumee GitHub</a></p>
</blockquote>]]></content><author><name></name></author><category term="React" /><summary type="html"><![CDATA[🖥️]]></summary></entry><entry><title type="html">트러블 슈팅 옵셔널 체이닝 해결 … Error of not finding of node (javascript)</title><link href="http://localhost:4000/react/2024/05/23/prooject_troubleshooting.html" rel="alternate" type="text/html" title="트러블 슈팅 옵셔널 체이닝 해결 … Error of not finding of node (javascript)" /><published>2024-05-23T00:00:00+09:00</published><updated>2024-05-23T00:00:00+09:00</updated><id>http://localhost:4000/react/2024/05/23/prooject_troubleshooting</id><content type="html" xml:base="http://localhost:4000/react/2024/05/23/prooject_troubleshooting.html"><![CDATA[<p>🖥️</p>

<p><code class="language-plaintext highlighter-rouge">이벤트 리스터의 오류와 해결</code></p>

<p>근본적으로 회원가입 페이지와, 로그인 페이지의 기능을 하나의 스크립트 파일에 선언해서 생긴 문제입니다.
로그인 페이지에 없는 회원 가입 페이지의 기능 중 해당이 안되는 eventlistner의 선언으로 properties of null이라는
타입 에러가 생겼습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Uncaught</span> <span class="no">TypeError</span><span class="p">:</span> <span class="no">Cannot</span> <span class="n">read</span> <span class="n">properties</span> <span class="n">of</span> <span class="n">null</span> <span class="p">(</span><span class="n">reading</span> <span class="s1">'addEventListener'</span><span class="p">)</span></code></pre></figure>

<p>해석해보자면 addEventListner 특정 요소에 특정 행동이 포착되면 작동하게끔 만드는 함수에서
특정 요소를 찾을 수 없어서 발생한 문제입니다.</p>

<p>이 문제를 해결하기 위해 우선적으로 옵셔널 체이닝 기업으로 해당 요소를 읽을 수 있을 경우에면
함수를 실행하도록 수정했습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">element?</span><span class="p">.</span><span class="nf">addEventListner</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="n">handleEvent</span><span class="p">);</span></code></pre></figure>

<p>실습을 진행하기 위해 임시방편으로 해결했던 문제는 로그인 페이지의 기능과
회원가입 페이지의 기능을 파일 분리를 통해 근본적으로 해결하도록 했습니다.</p>

<blockquote>
  <p>코딩 연습과 프로젝트 진행하면서 느낀 점들을 솔직하게 적었어요. <a href="https://blog.naver.com/hello_world_yum">Yumee Naver Blog</a></p>
</blockquote>

<blockquote>
  <p>저의 포트폴리오 사이트에요. <a href="https://github.com/jekyll/jekyll">Yumee Portfolio site</a></p>
</blockquote>

<blockquote>
  <p>깃헙에서 더 자세히 알아볼 수 있어요. <a href="https://github.com/yumi-kim-0827">Yumee GitHub</a></p>
</blockquote>]]></content><author><name></name></author><category term="React" /><summary type="html"><![CDATA[🖥️]]></summary></entry><entry><title type="html">리액트 useContext 연습 … Simple test of useContext for understanding (React js)</title><link href="http://localhost:4000/react/2024/05/18/Simple-test-useContext-of-React-copy.html" rel="alternate" type="text/html" title="리액트 useContext 연습 … Simple test of useContext for understanding (React js)" /><published>2024-05-18T00:00:00+09:00</published><updated>2024-05-18T00:00:00+09:00</updated><id>http://localhost:4000/react/2024/05/18/Simple-test-useContext-of-React%20copy</id><content type="html" xml:base="http://localhost:4000/react/2024/05/18/Simple-test-useContext-of-React-copy.html"><![CDATA[<p>🖥️</p>

<p>React의 <code class="language-plaintext highlighter-rouge">useContext</code> 훅은 React 컴포넌트에서 전역으로 상태를 공유할 수 있게 해주는 기능입니다.
주로 react 애플리케이션에서 상태 관리를 위해 사용되며, 다른 컴포넌트 간에 데이터를 전달할 떄 유용합니다.</p>

<p><code class="language-plaintext highlighter-rouge">CreateContext &amp; Provider --- &gt; useContext</code></p>

<p>리액트의 CONTEXT 훅은 익히기 위해 다음과 같이 컴포넌트 구조를 구현하였습니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="no">Grand1</span><span class="o">&gt;</span>
<span class="err">├─</span> <span class="o">&lt;</span><span class="no">Child1</span><span class="o">&gt;</span>
<span class="err">│</span>
<span class="err">├─</span> <span class="o">&lt;</span><span class="no">Child2</span><span class="o">&gt;</span>
   <span class="err">│</span>
   <span class="err">└─</span> <span class="o">&lt;</span><span class="no">Child22</span><span class="o">&gt;</span></code></pre></figure>

<p>Grand 1.jsx에서 생성한 name과 count state, 그리고 함수를 하위 컴포넌트와 공유할 것입니다.
<code class="language-plaintext highlighter-rouge">state값</code>을 내려주는 <code class="language-plaintext highlighter-rouge">valueContext</code>, <code class="language-plaintext highlighter-rouge">함수를 내려주는 FuncContext</code>로 따로 만들어
전역에 state값을 공유하고 자식 - 손자인 Child22에만 함수를 전달해줍니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="no">React</span><span class="p">,</span> <span class="p">{</span> <span class="n">useState</span><span class="p">,</span> <span class="n">createContext</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"react"</span><span class="p">;</span>
<span class="n">import</span> <span class="no">Child1</span> <span class="n">from</span> <span class="s2">"./Child1"</span><span class="p">;</span>
<span class="n">import</span> <span class="no">Child2</span> <span class="n">from</span> <span class="s2">"./Child2"</span><span class="p">;</span>

<span class="sr">//</span><span class="err">컨택스트</span> <span class="err">선언</span>
<span class="n">export</span> <span class="n">const</span> <span class="n">valueContext</span> <span class="o">=</span> <span class="n">createContext</span><span class="p">();</span>
<span class="n">export</span> <span class="n">const</span> <span class="no">FuncContext</span> <span class="o">=</span> <span class="n">createContext</span><span class="p">();</span>

<span class="n">const</span> <span class="no">Grand1</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">valueContext</span><span class="p">);</span>
<span class="sr">//</span><span class="err">값</span>
<span class="n">const</span> <span class="p">[</span><span class="nb">name</span><span class="p">,</span> <span class="n">setName</span><span class="p">]</span> <span class="o">=</span> <span class="n">useState</span><span class="p">(</span><span class="s2">""</span><span class="p">);</span>
<span class="n">const</span> <span class="p">[</span><span class="n">count</span><span class="p">,</span> <span class="n">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="n">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="sr">//</span><span class="err">함수</span>
<span class="n">const</span> <span class="n">handleClickCount</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">setCount</span><span class="p">(</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">};</span>
<span class="n">const</span> <span class="n">handleChangeName</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">setName</span><span class="p">(</span><span class="s2">"이름을 추가했어요!"</span><span class="p">);</span>
<span class="p">};</span>
<span class="k">return</span> <span class="p">(</span>

<span class="o">&lt;</span><span class="n">div</span> <span class="k">class</span><span class="o">=</span><span class="s2">"test"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="err">부모</span> <span class="err">컴포넌트</span> <span class="n">grand</span> <span class="mi">1</span><span class="o">&lt;</span><span class="sr">/h2&gt;
&lt;div class="child"&gt;
&lt;valueContext.Provider value=&gt;
&lt;Child1 /</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="no">FuncContext</span><span class="o">.</span><span class="no">Provider</span> <span class="n">value</span><span class="o">=&gt;</span>
<span class="o">&lt;</span><span class="no">Child2</span> <span class="sr">/&gt;
&lt;/</span><span class="no">FuncContext</span><span class="o">.</span><span class="no">Provider</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/valueContext.Provider&gt;
&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/div&gt;
);
};

export default Grand1;</span></code></pre></figure>

<p>Child 1.jsx에서 생성한 name과 count state 값을 받아 호출합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="no">React</span><span class="p">,</span> <span class="p">{</span> <span class="n">useContext</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"react"</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="n">valueContext</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"./Grand1"</span><span class="p">;</span>

<span class="n">const</span> <span class="no">Child1</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">const</span> <span class="n">data</span> <span class="o">=</span> <span class="n">useContext</span><span class="p">(</span><span class="n">valueContext</span><span class="p">);</span>
<span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Child1 자손 실행"</span><span class="p">);</span>

<span class="k">return</span> <span class="p">(</span>

<span class="o">&lt;</span><span class="n">div</span> <span class="n">className</span><span class="o">=</span><span class="s2">"test_child"</span><span class="o">&gt;</span>
<span class="err">자식</span> <span class="err">컴포넌트</span> <span class="no">Child</span> <span class="mi">1</span><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="err">카운트</span> <span class="p">:</span> <span class="p">{</span><span class="n">data</span><span class="p">.</span><span class="nf">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;네임 : {data.name}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/div&gt;
);
};

export default Child1;</span></code></pre></figure>

<p>Child 2.jsx에서도 마찬가지로 state 값을 호출합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="no">React</span><span class="p">,</span> <span class="p">{</span> <span class="n">useContext</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"react"</span><span class="p">;</span>
<span class="n">import</span> <span class="no">Child22</span> <span class="n">from</span> <span class="s2">"./Child22"</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="n">valueContext</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"./Grand1"</span><span class="p">;</span>

<span class="n">const</span> <span class="no">Child2</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">const</span> <span class="n">data</span> <span class="o">=</span> <span class="n">useContext</span><span class="p">(</span><span class="n">valueContext</span><span class="p">);</span>
<span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Child2 자손 실행"</span><span class="p">);</span>

<span class="k">return</span> <span class="p">(</span>

<span class="o">&lt;</span><span class="n">div</span> <span class="n">className</span><span class="o">=</span><span class="s2">"test_child"</span><span class="o">&gt;</span>
<span class="err">자식</span> <span class="err">컴포넌트</span> <span class="no">Child</span> <span class="mi">2</span><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="err">카운트</span> <span class="p">:</span> <span class="p">{</span><span class="n">data</span><span class="p">.</span><span class="nf">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;p&gt;네임 : {data.name}&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="no">Child22</span> <span class="sr">/&gt;
&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
<span class="p">);</span>
<span class="p">};</span>

<span class="n">export</span> <span class="n">default</span> <span class="no">Child2</span><span class="p">;</span></code></pre></figure>

<p>버튼을 추가한 손자 컴포넌트 Child22에 함수를 전달하여
호출합니다.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">import</span> <span class="no">React</span><span class="p">,</span> <span class="p">{</span> <span class="n">useContext</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"react"</span><span class="p">;</span>
<span class="n">import</span> <span class="p">{</span> <span class="no">FuncContext</span> <span class="p">}</span> <span class="n">from</span> <span class="s2">"./Grand1"</span><span class="p">;</span>

<span class="n">const</span> <span class="no">Child22</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
<span class="n">const</span> <span class="n">data</span> <span class="o">=</span> <span class="n">useContext</span><span class="p">(</span><span class="no">FuncContext</span><span class="p">);</span>
<span class="n">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">"Child22 손자 실행"</span><span class="p">);</span>

<span class="k">return</span> <span class="p">(</span>

<span class="o">&lt;</span><span class="n">div</span> <span class="n">className</span><span class="o">=</span><span class="s2">"test_child"</span><span class="o">&gt;</span>
<span class="err">손자</span> <span class="err">컴포넌트</span> <span class="no">Child</span> <span class="mi">22</span><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="err">여기서</span> <span class="err">함수</span> <span class="err">실행</span><span class="o">&lt;</span><span class="sr">/p&gt;
&lt;div&gt;
&lt;button onClick={data.handleChangeName}&gt;이름추가&lt;/</span><span class="n">button</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">button</span> <span class="n">onClick</span><span class="o">=</span><span class="p">{</span><span class="n">data</span><span class="p">.</span><span class="nf">handleClickCount</span><span class="p">}</span><span class="o">&gt;</span><span class="err">더하기</span><span class="mi">1</span><span class="o">&lt;</span><span class="sr">/button&gt;
&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/div&gt;
);
};

export default Child22;</span></code></pre></figure>

<p>전역에서 count와 name값을 호출하고 손자인 Child22에서 함수를 호출하여 사용할 수 있습니다.</p>

<blockquote>
  <p>코딩 연습과 프로젝트 진행하면서 느낀 점들을 솔직하게 적었어요. <a href="https://blog.naver.com/hello_world_yum">Yumee Naver Blog</a></p>
</blockquote>

<blockquote>
  <p>저의 포트폴리오 사이트에요. <a href="https://github.com/jekyll/jekyll">Yumee Portfolio site</a></p>
</blockquote>

<blockquote>
  <p>깃헙에서 더 자세히 알아볼 수 있어요. <a href="https://github.com/yumi-kim-0827">Yumee GitHub</a></p>
</blockquote>]]></content><author><name></name></author><category term="React" /><summary type="html"><![CDATA[🖥️]]></summary></entry><entry><title type="html">소개 … Introduction 🙂</title><link href="http://localhost:4000/about/2024/05/08/Introduction.html" rel="alternate" type="text/html" title="소개 … Introduction 🙂" /><published>2024-05-08T00:00:00+09:00</published><updated>2024-05-08T00:00:00+09:00</updated><id>http://localhost:4000/about/2024/05/08/Introduction</id><content type="html" xml:base="http://localhost:4000/about/2024/05/08/Introduction.html"><![CDATA[<p>📖 아주대학교 경영학부 4년제 학사 졸업</p>

<p>✏️ 스마트 웹&amp;콘텐츠개발 과정 수료</p>

<p>🏢 웹 디자인, 퍼블리싱 경력 4년 차 (한국🇰🇷 : 4년 1개월 / 프랑스🇫🇷 : 7개월)</p>

<p>💻 코드잇 프론트엔드 부트캠프 과정 수료</p>

<p>🖥️ 기술 스택 : React, Next.js, Typescript, html5, CSS3, SCSS</p>

<h2 id="온라인-마케팅-기획--웹-기획---웹-디자인--퍼블리싱을-거쳐-새로운-도전에-직면하고-있습니다">온라인 마케팅 기획 &amp; 웹 기획 - 웹 디자인 &amp; 퍼블리싱을 거쳐 새로운 도전에 직면하고 있습니다.</h2>

<p>기획과 디자인, 화면 구현하면서 리액트와 같은 현대적인 프레임워크를 활용하여 더 나은 서비스 경험을 제공하기 위해 노력합니다.</p>

<h1 id="단계별-역량">단계별 역량</h1>

<p><code class="language-plaintext highlighter-rouge">웹 기획과 디자인 경험</code> : 사이트 기획에 있어 user flow의 이해와 심미적이고 직관적인 인터페이스를 최적화하기 위해 노력함.</p>

<p><code class="language-plaintext highlighter-rouge">퍼블리싱과 프론트 엔드 경험</code> : 실제 사용자가 마주하는 인터페이스를 더욱 디테일하게 접근하며 웹표준 준수와 SEO 중요성을 이해, 웹 사이투의 품질을 향상시키기 위해 주력함.</p>

<h1 id="포부">포부</h1>

<p>웹 서비스와 관련된 경험을 토대로 다양한 부서와의 의견 수용에 유연하며, 문제해결이나 업데이트에 대한 빠른 피드백이 가능합니다.</p>

<p>성실한 업무수행과 더불어 타인에 대한 이해와 윤리적 규범을 중요히 여겨 관계에 대하여 섬세히 접근하는 태도를 고수하고 있으며 능률적이고 생산적인 업무를 수행할 것을 약속드립니다.</p>

<blockquote>
  <p>코딩 연습과 프로젝트 진행하면서 느낀 점들을 솔직하게 적었어요. <a href="https://blog.naver.com/hello_world_yum">Yumee Naver Blog</a></p>
</blockquote>

<blockquote>
  <p>저의 포트폴리오 사이트에요. <a href="https://github.com/jekyll/jekyll">Yumee Portfolio site</a></p>
</blockquote>

<blockquote>
  <p>깃헙에서 더 자세히 알아볼 수 있어요. <a href="https://github.com/yumi-kim-0827">Yumee GitHub</a></p>
</blockquote>]]></content><author><name></name></author><category term="ABOUT" /><summary type="html"><![CDATA[📖 아주대학교 경영학부 4년제 학사 졸업]]></summary></entry></feed>